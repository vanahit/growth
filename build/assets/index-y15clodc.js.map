{"version":3,"mappings":"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","names":["STableContainer","styled","div","theme","table","border","spacings","md","STableHeader","thead","headerBackground","headerText","STableHeaderCell","th","sm","$sortable","$width","headerHover","TableHeader","memo","columns","onSortChange","sortConfig","children","jsx","map","column","jsxs","width","sortable","onClick","key","direction","header","className","Icon","size","icon","EIconNames","ARROW_UP","ARROW_DOWN","String","STableBody","tbody","bodyBackground","STableEmptyState","span","fontSizes","xxl","STableRow","tr","rowEven","rowOdd","rowHover","STableDataCell","td","$align","TableRow","row","rowIndex","align","render","value","TableBodyExported","data","loading","emptyText","content","useMemo","length","colSpan","Loading","centered","index","Table","currentPage","onPageChange","pageSize","filterQuery","filterKeys","sortedData","setSortedData","useState","useEffect","sorted","sort","a","b","filteredData","setFilteredData","lowercasedFilter","toLowerCase","filtered","filter","some","item","includes","paginatedData","slice","Pagination","totalCount","HighlightedText","lazy","__vitePreload","import","__VITE_PRELOAD__","SStyledInput","then","module","default","DeleteUser","__VITE_IS_MODERN__","n","i","Users","navigate","useNavigate","setSortConfig","search","setSearch","setCurrentPage","isLoading","useGetUsersQuery","searchVal","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","ERoutePath","USERS","id","state","highlight","text","fullName","email","DELETE","Suspense","fallback","Page","title","actions","onChange","e","target","placeholder"],"ignoreList":[],"sources":["../../src/components/Table/Table.styles.ts","../../src/components/Table/TableHeader/TableHeader.styles.ts","../../src/components/Table/TableHeader/index.tsx","../../src/components/Table/TableBody/TableBody.styles.ts","../../src/components/Table/TableRow/TableRow.styles.ts","../../src/components/Table/TableRow/index.tsx","../../src/components/Table/TableBody/index.tsx","../../src/components/Table/index.tsx","../../src/components/Table/TableHooks/useSortData.ts","../../src/components/Table/TableHooks/useFilterData.ts","../../src/pages/Users/index.tsx","../../src/hooks/useDebounce.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const STableContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    overflow-y: scroll;\n    width: 100%;\n\n    table {\n        table-layout: fixed;\n        flex: 1;\n        border: 1px solid ${({theme}) => theme.table.border};\n        display: table;\n        border-collapse: collapse;\n        height: 100%;\n        width: 100%;\n        overflow-x: auto;\n        white-space: nowrap;\n    }\n\n    margin: ${({theme}) => theme.spacings.md};\n`;\n\n\n\n","import styled from 'styled-components';\n\nexport const STableHeader = styled.thead`\n    background-color: ${({theme}) => theme.table.headerBackground};\n    color: ${({theme}) => theme.table.headerText};\n    border-bottom: 1px solid ${({theme}) => theme.table.border};\n    vertical-align: middle;\n    & > tr {\n        vertical-align: middle;\n    }\n`;\n\nexport const STableHeaderCell = styled.th<{ $sortable?: boolean, $width?: string }>`\n    padding: ${({theme}) => theme.spacings.sm};\n    cursor: ${({$sortable}) => ($sortable ? 'pointer' : 'default')};\n    position: relative;\n    width: ${({ $width}) => $width || 'max-content'};\n    text-align: center; /* Center align header text */\n    border-left: 1px solid ${({theme}) => theme.table.border};\n    vertical-align: middle;\n    height: 40px;\n    &:hover {\n        background-color: ${({theme, $sortable}) =>\n                $sortable ? theme.table.headerHover : 'inherit'};\n    }\n\n    & .sort-icons {\n        display: inline-flex;\n        flex-direction: column;\n        vertical-align: middle;\n        margin-left: 8px;\n    }\n\n    & > div > span {\n        margin: 2px 0;\n    }\n`;\n\n","import {memo} from \"react\";\nimport {EIconNames, Icon } from \"components/Icon/index.tsx\";\nimport {ITableHeaderProps} from \"../Table.types.ts\";\nimport {STableHeader, STableHeaderCell} from \"./TableHeader.styles.ts\";\n\n\n\nconst TableHeader = memo(<T, >({columns, onSortChange, sortConfig}: ITableHeaderProps<T>) => {\n    const handleSort = (key: keyof T) => {\n        let direction: 'asc' | 'desc' = 'asc';\n        if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {\n            direction = 'desc';\n        }\n        onSortChange && onSortChange({key, direction});\n    };\n\n    return (\n        <STableHeader>\n            <tr>\n                {columns.map((column) => (\n                    <STableHeaderCell\n                        $width={column.width}\n                        $sortable={column.sortable}\n                        key={String(column.key)}\n                        onClick={() => column.sortable && handleSort(column.key as keyof T)}\n                    >\n                        {column.header}\n                        {sortConfig && sortConfig.key === column.key ? (\n                            <span className='sort-icons'>\n                                {sortConfig.direction === 'asc' ? (\n                                    <Icon size={16} icon={EIconNames.ARROW_UP}/>\n                                ) : (\n                                    <Icon size={16} icon={EIconNames.ARROW_DOWN}/>\n                                )}\n                            </span>\n                        ) : (\n                            column.sortable && (\n                                <span className='sort-icons'>\n                                            <Icon size={16} icon={EIconNames.ARROW_UP}/>\n                                            <Icon size={16} icon={EIconNames.ARROW_DOWN}/>\n                                </span>\n                            )\n                        )}\n                    </STableHeaderCell>\n                ))}\n            </tr>\n        </STableHeader>\n\n    );\n});\n\nexport  { TableHeader } ;\n","import styled from \"styled-components\";\n\nexport const STableBody = styled.tbody`\n    background-color: ${({ theme }) => theme.table.bodyBackground};\n`;\n\nexport const STableEmptyState = styled.span`\n    padding: ${({ theme }) => theme.spacings.md};\n    font-size: ${({ theme }) => theme.fontSizes.xxl};\n    text-align: center;\n    color: ${({ theme }) => theme.table.headerText};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex: 1;\n    height: 100%;\n    width: 100%;\n`;\n","// Styled table row\nimport styled from \"styled-components\";\nimport {TAlign} from \"../Table.types.ts\";\n\n\nexport const STableRow = styled.tr`\n    vertical-align: middle;\n    &:nth-child(even) {\n        background-color: ${({ theme }) => theme.table.rowEven};\n    }\n    &:nth-child(odd) {\n        background-color: ${({ theme }) => theme.table.rowOdd};\n    }\n    &:hover {\n        background-color: ${({ theme }) => theme.table.rowHover};\n    }\n`;\n\nexport const STableDataCell = styled.td<{ $align?: TAlign}>`\n    padding: ${({theme}) => theme.spacings.md};\n    border-bottom: 1px solid ${({theme}) => theme.table.border};\n    width: auto;\n    border-left: 1px solid ${({theme}) => theme.table.border};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    text-align: ${({$align}) =>  $align || 'left'};\n`;","import {memo, ReactNode} from \"react\";\nimport {TTableRowProps} from \"../Table.types.ts\";\nimport {STableDataCell, STableRow} from \"./TableRow.styles.ts\";\n\nconst TableRow = memo(<T, >({row, columns, rowIndex}: TTableRowProps<T>) => {\n    return (\n        <STableRow>\n            {columns.map((column) => (\n                    column.key !== 'actions' ? (\n                        <STableDataCell key={String(column.key)} $align={column.align}>\n                            {column.render ? column.render({value: row[column.key as keyof typeof row], row, rowIndex}) : row[column.key as keyof typeof row] as ReactNode}\n                        </STableDataCell>\n                    ) : (\n                        column.render ? <STableDataCell  $align={column.align} key=\"actions\">\n                            {column.render({row, rowIndex})}\n                        </STableDataCell> : null\n                    )\n                )\n            )}\n        </STableRow>\n    );\n});\n\nexport { TableRow };","import {memo, useMemo } from \"react\";\nimport Loading from \"components/Loading\";\nimport { ITableBodyProps } from \"../Table.types\";\nimport {STableBody, STableEmptyState } from \"./TableBody.styles\";\nimport {TableRow} from \"../TableRow\";\n\n\n\nconst TableBody = <T,>({ data, columns, loading, emptyText }: ITableBodyProps<T>) => {\n    const content = useMemo(() => {\n        if (loading && data.length === 0) {\n            return (\n                <tr>\n                    <td colSpan={columns.length}>\n                        <Loading centered />\n                    </td>\n                </tr>\n            );\n        }\n\n        if (data.length === 0) {\n            return (\n                <tr>\n                    <td colSpan={columns.length}>\n                        <STableEmptyState>{emptyText || 'No data found!'}</STableEmptyState>\n                    </td>\n                </tr>\n            );\n        }\n\n        return data.map((row, index) => (\n            <TableRow\n                key={index}\n                row={row}\n                columns={columns}\n                rowIndex={index}\n            />\n        ));\n    }, [data, columns, loading, emptyText]);\n\n    return <STableBody>{content}</STableBody>;\n};\n\n\n\nexport const TableBodyExported = memo(TableBody);\n\n","import Pagination from \"components/Pagination\";\nimport { STableContainer } from './Table.styles';\nimport { ITableProps } from './Table.types';\nimport useSortData from './TableHooks/useSortData.ts';\nimport useFilterSearchData from './TableHooks/useFilterData.ts';\nimport {TableHeader} from './TableHeader';\nimport { TableBodyExported } from './TableBody';\n\n\n\nconst Table = <T,>({\n                       columns,\n                       data,\n                       sortConfig,\n                       onSortChange,\n                       currentPage,\n                       onPageChange,\n                       pageSize = 10,\n                       loading,\n                       emptyText,\n                       filterQuery,\n                       filterKeys\n                   }: ITableProps<T>) => {\n    const sortedData = useSortData(data, sortConfig);\n    const filteredData = useFilterSearchData(sortedData, filterQuery, filterKeys);\n    const paginatedData = filteredData.slice((currentPage - 1) * pageSize, currentPage * pageSize);\n\n    return (\n        <STableContainer>\n            <table>\n                <TableHeader columns={columns} onSortChange={onSortChange} sortConfig={sortConfig} />\n                <TableBodyExported loading={loading} emptyText={emptyText} data={paginatedData} columns={columns} />\n            </table>\n            <Pagination\n                currentPage={currentPage}\n                totalCount={filteredData.length} // Use filteredData length to calculate total pages\n                pageSize={pageSize}\n                onPageChange={onPageChange}\n            />\n        </STableContainer>\n    );\n};\n\nexport default Table;\n","import { useState, useEffect } from 'react';\nimport {ISortConfig} from \"../Table.types.ts\";\n\n\nconst useSortData = <T,>(data: T[], sortConfig: ISortConfig<T> | undefined) => {\n    const [sortedData, setSortedData] = useState<T[]>(data);\n\n    useEffect(() => {\n        if (sortConfig) {\n            const sorted = [...data].sort((a, b) => {\n                if (a[sortConfig.key] < b[sortConfig.key]) {\n                    return sortConfig.direction === 'asc' ? -1 : 1;\n                }\n                if (a[sortConfig.key] > b[sortConfig.key]) {\n                    return sortConfig.direction === 'asc' ? 1 : -1;\n                }\n                return 0;\n            });\n            setSortedData(sorted);\n        } else {\n            setSortedData(data);\n        }\n    }, [data, sortConfig]);\n\n    return sortedData;\n};\n\nexport default useSortData;\n","import { useState, useEffect } from 'react';\n\nconst useFilterSearchData = <T,>(data: T[], filterQuery: string, filterKeys: (keyof T)[]) => {\n    const [filteredData, setFilteredData] = useState<T[]>(data);\n\n    useEffect(() => {\n        if (filterQuery) {\n            const lowercasedFilter = filterQuery.toLowerCase();\n            const filtered = data.filter(item =>\n                filterKeys.some(key =>\n                    String(item[key]).toLowerCase().includes(lowercasedFilter)\n                )\n            );\n            setFilteredData(filtered);\n        } else {\n            setFilteredData(data);\n        }\n    }, [data, filterQuery, filterKeys]);\n\n    return filteredData;\n};\n\nexport default useFilterSearchData;\n","import  { useState, Suspense, lazy } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ISortConfig, ITableColumn } from 'components/Table/Table.types.ts';\nimport { useGetUsersQuery } from 'redux/apiSlices/users.slice.ts';\nimport { TUserUI } from 'redux/types/users.types.ts';\nimport useDebounce from 'hooks/useDebounce.ts';\nimport { ERoutePath } from 'routes/routes.types.ts';\nimport {EIconNames} from \"components/Icon\";\nimport Table from 'components/Table/index.tsx';\nimport Loading from \"../../components/Loading\";\nimport Page from 'components/Page/index.tsx';\n\n// Define types for dynamically imported components\nconst HighlightedText = lazy(() => import('components/HighlitedText'));\nconst SStyledInput = lazy(() => import('./Users.styles.ts').then(module => ({ default: module.SStyledInput })));\nconst DeleteUser = lazy(() => import('./DeleteUser').then(module => ({ default: module.DeleteUser })));\nconst Icon = lazy(() => import('components/Icon').then(module => ({ default: module.Icon })));\n\n\nconst Users = () => {\n    const navigate = useNavigate();\n    const [sortConfig, setSortConfig] = useState<ISortConfig<TUserUI>>({ key: 'fullName', direction: 'asc' });\n    const [search, setSearch] = useState(\"\");\n    const [currentPage, setCurrentPage] = useState(1);\n    const { data, isLoading } = useGetUsersQuery();\n    const searchVal = useDebounce(search, 300);\n\n    const columns: ITableColumn<TUserUI>[] = [\n        {\n            key: `fullName`,\n            header: 'Full Name',\n            sortable: true,\n            width: '300px',\n            render: ({ row }) => {\n                return (\n                    <div\n                        className='pointer link'\n                        onClick={() => navigate(`/${ERoutePath.USERS}/${row.id}`, { state: row })}\n                    >\n                        <HighlightedText highlight={search} text={row.fullName} />\n                    </div>\n                );\n            }\n        },\n        {\n            key: 'email',\n            width: '300px',\n            header: 'Email',\n            sortable: true,\n            render: ({ row }) => <HighlightedText highlight={search} text={row.email} />\n        },\n        { key: 'age', width: '150px', header: 'Age', align: 'center' },\n        {\n            key: 'actions',\n            width: '100px',\n            header: 'Actions',\n            align: 'center',\n            render: ({ row }) => (\n                <DeleteUser id={row.id}>\n                    <Icon size={20} icon={EIconNames.DELETE} />\n                </DeleteUser>\n            )\n        }\n    ];\n\n    return (\n        <Suspense fallback={<Loading />}>\n            <Page title='Users' actions={\n                <SStyledInput value={search} onChange={(e) => setSearch(e.target.value)} placeholder='Search by name,email...' />\n            }>\n                <Table\n                    loading={isLoading}\n                    columns={columns}\n                    data={data?.content || []}\n                    sortConfig={sortConfig}\n                    onSortChange={setSortConfig}\n                    currentPage={currentPage}\n                    pageSize={10}\n                    onPageChange={setCurrentPage}\n                    filterKeys={['firstName', 'email']}\n                    filterQuery={searchVal}\n                />\n            </Page>\n        </Suspense>\n    );\n};\n\nexport default Users;\n","import { useState, useEffect } from 'react';\n\nfunction useDebounce<T>(value: T, delay: number): T {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n\nexport default useDebounce;\n"],"file":"assets/index-y15clodc.js"}