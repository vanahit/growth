{"version":3,"mappings":";8RAOA,MAAMA,EAAQC,OAAK,IAAMC,EAAA,IAAAC,OAAO,uBAAmBC,sCAAA,GAC7CC,EAAMJ,OAAK,IAAMC,EAAA,IAAAC,OAAO,uBAAiBG,KAAAC,KAAAC,GAAAJ,oCAAEE,KAAKG,KAAaC,QAASD,EAAOJ,GAC7EM,OAAMV,OAAK,IAAMC,EAAA,IAAAC,OAAO,uBAAiBG,KAAAC,KAAAC,GAAAJ,oCAAEE,KAAKG,KAAaC,QAASD,EAAOE,GAC7EC,OAAQX,OAAK,IAAMC,EAAA,IAAAC,OAAO,qBAAkBU,EAAAT,qCAAEE,OAAKG,KAAaC,QAASD,EAAOG,KAChFE,OAAWb,OAAK,IAAMC,EAAA,IAAAC,OAAO,uBAAkBC,qCAAA,EAAEE,KAAKG,KAAaC,QAASD,EAAOK,aACnFC,EAAed,OAAK,IAAMC,EAAA,IAAAC,OAAO,uBAA0BC,wCAG3DY,EAAa,EAAGC,eAClB,KAAOC,GAAOC,CAAYC,aAAS,EAC5BC,KAASC,GAAcF,WAAS,KAChCG,EAAMC,GAAWC,EAAML,cACvBM,EAAWC,GAAgBF,EAAML,SAAS,KAC1CQ,EAAiBC,CAAsBJ,IAAML,SAAS,KACtDU,GAASC,UAAEA,IAAeC,IAE3BC,EAAe,KACjBd,EAAS,EACTG,IAAW,EAAE,GAGXY,EAAc,IAChBL,GAAmB,IACnBF,EAAa,IACAM,GAAA,EA+BXE,EAAiBV,EAAMW,aAAanB,EAAU,CAChDoB,QAAS,IAAMb,EAAQ,MAG3B,OACKc,OAAAC,WAAA,CAASC,SAAUC,MAACC,IACjBzB,WAAA,CAAAwB,MAACzC,EAAA,CACG2C,QAASZ,EACTa,SAAU,MAtBd,mBAAAlB,IAAc,IAAME,IAAoB,GACxCT,EAAS,kCAEL,IACMW,SAAQ,CAAEe,MAAOnB,EAAUoB,KAAQC,OAAMnB,EAAgBkB,KAAUE,aAC7Dd,IACZZ,EAAW,kCACNJ,GACL,MAAM+B,EAAM/B,EACHC,IAAA8B,mBAAKC,OAALD,cAAWE,UAAW,wBACnC,CACJ,GAW6BC,CAAc,EACnCC,WAAW,SACXC,WAAW,SACX/B,OACAgC,QAxCI,KACArB,IACZV,EAAQ,GAAK,EAuCLqB,MAAM,iBAEN5B,SAAAqB,OAAC3B,GAAI6C,OAAQ,CAAC,GAAI,EAAKC,UAAQ,QAC3BxC,SAAA,CAACqB,OAAAjC,EAAA,CAAIqD,KAAM,GACPzC,SAAA,CAAAwB,MAAC,MAAGxB,SAAK,UACTwB,MAAC7B,EAAA,CACG+C,YAAY,gBACZC,MAAOlC,EACPmC,KAAK,YACLC,SA7CGC,GACVpC,GAAAoC,EAAEC,OAAOJ,MAAK,CA+CftB,aAACjC,EAAI,CAAAqD,KAAM,GACPzC,SAAA,CAAAwB,MAAC,MAAGxB,SAAW,aACfwB,SAAC3B,EAAA,CACG6C,YAAY,sBACZC,MAAOhC,EACPiC,KAAK,kBACLC,SAlDSC,IACVlC,EAAAkC,EAAEC,OAAOJ,KAAK,QAoDrBtB,OAACjC,EAAI,CAAAqD,KAAM,GACPzC,SAAA,CAAAwB,MAAC1B,GAAakD,KAAK,UAAUV,QAAStB,EAAckB,QAAS9B,UAC5DN,EAAa,CAAAkD,KAAK,SAASV,QAAStB,EAAckB,QAASjC,YAIvEiB,IACL","names":["Popup","lazy","__vitePreload","import","__VITE_PRELOAD__","Col","then","n","g","module","default","Row","Input","__VITE_IS_MODERN__","Textarea","AlertMessage","CreatePost","children","error","setError","useState","success","setSuccess","open","setOpen","React","postTitle","setPostTitle","postDescription","setPostDescription","addPost","isLoading","useAddPostMutation","onAlertClose","onFormReset","clonedChildren","cloneElement","onClick","jsxs","Suspense","fallback","jsx","Loading","loading","onSubmit","title","trim","body","unwrap","err","data","message","handleAddPost","submitText","cancelText","onClose","gutter","justify","span","placeholder","value","name","onChange","e","target","type"],"ignoreList":[],"sources":["../../src/pages/Posts/CreatePost/index.tsx"],"sourcesContent":["import React, { ChangeEvent, useState, Suspense, lazy } from 'react';\nimport { useAddPostMutation } from 'redux/apiSlices/posts.slice.ts';\nimport { TRtkErrorType } from 'redux/types/api.types.ts';\nimport Loading from \"components/Loading\";\nimport { ICreatePostProps } from './CreatePost.types.ts';\n\n// Dynamically import components\nconst Popup = lazy(() => import('components/Popup'));\nconst Col = lazy(() => import('components/Grid').then(module => ({ default: module.Col })));\nconst Row = lazy(() => import('components/Grid').then(module => ({ default: module.Row })));\nconst Input = lazy(() => import('components/Input').then(module => ({ default: module.Input })));\nconst Textarea = lazy(() => import('components/Input').then(module => ({ default: module.Textarea })));\nconst AlertMessage = lazy(() => import('components/AlertMessage'));\n\n\nconst CreatePost = ({ children }: ICreatePostProps) => {\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [open, setOpen] = React.useState(false);\n    const [postTitle, setPostTitle] = React.useState(\"\");\n    const [postDescription, setPostDescription] = React.useState(\"\");\n    const [addPost, { isLoading }] = useAddPostMutation();\n\n    const onAlertClose = () => {\n        setError('');\n        setSuccess('');\n    };\n\n    const onFormReset = () => {\n        setPostDescription('');\n        setPostTitle('');\n        onAlertClose();\n    };\n\n    const onClose = () => {\n        onFormReset();\n        setOpen(false);\n    };\n\n    const onPostTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setPostTitle(e.target.value);\n    };\n\n    const onPostDescriptionChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setPostDescription(e.target.value);\n    };\n\n    const handleAddPost = async () => {\n        if (postTitle === \"\" || postDescription === \"\") {\n            setError('Both fields are mandatory!');\n        } else {\n            try {\n                await addPost({ title: postTitle.trim(), body: postDescription.trim() }).unwrap();\n                onFormReset();\n                setSuccess('Post successfully added!');\n            } catch (error) {\n                const err = error as TRtkErrorType;\n                setError(err?.data?.message || 'Something went wrong!');\n            }\n        }\n    };\n\n    const clonedChildren = React.cloneElement(children, {\n        onClick: () => setOpen(true),\n    });\n\n    return (\n        <Suspense fallback={<Loading />}>\n            <Popup\n                loading={isLoading}\n                onSubmit={() => void handleAddPost()}\n                submitText='Create'\n                cancelText='Cancel'\n                open={open}\n                onClose={onClose}\n                title='Add a new post'\n            >\n                <Row gutter={[16, 16]} justify='start'>\n                    <Col span={24}>\n                        <h4>Title</h4>\n                        <Input\n                            placeholder='Type title...'\n                            value={postTitle}\n                            name='postTitle'\n                            onChange={onPostTitleChange}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <h4>Description</h4>\n                        <Textarea\n                            placeholder='Type description...'\n                            value={postDescription}\n                            name='postDescription'\n                            onChange={onPostDescriptionChange}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <AlertMessage type='success' onClose={onAlertClose} message={success} />\n                        <AlertMessage type='danger' onClose={onAlertClose} message={error} />\n                    </Col>\n                </Row>\n            </Popup>\n            {clonedChildren}\n        </Suspense>\n    );\n};\n\nexport default CreatePost;\n"],"file":"assets/index-D4gWPYyo.js"}