{"version":3,"file":"index-B--r5Ks6.js","sources":["../../src/components/Popup/Popup.styles.ts","../../src/components/Popup/index.tsx","../../src/components/AlertMessage/AlertMessage.styles.ts","../../src/components/AlertMessage/index.tsx","../../src/pages/Posts/CreatePost/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\n\n\nexport const SOverlay = styled.div<{ $isOpen: boolean }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: ${({ $isOpen }) => ($isOpen ? 'block' : 'none')};\n  z-index: 1000;\n`;\n\nexport const SPopupContainer = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: ${({theme}) => theme.main.background};\n    border-radius: ${({theme}) => theme.radiuses.md};\n    box-shadow: ${({theme}) => theme.boxShadows.boxShadow2};\n    padding: ${({theme}) => theme.spacings.lg};\n    z-index: 1001;\n    width: 500px;\n    max-width: calc(100% - 32px);\n`;\n\nexport const SPopupHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ${({ theme }) => theme.spacings.md};\n`;\n\nexport const SPopupTitle = styled.h2`\n  font-size: ${({ theme }) => theme.fontSizes.lg};\n  color: ${({ theme }) => theme.main.textColor};\n  margin: 0;\n`;\n\nexport const SPopupBody = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.md};\n  color: ${({ theme }) => theme.main.textColor};\n    text-align: left;\n`;","import React from 'react';\nimport {EIconNames, Icon } from 'components/Icon/index.tsx';\nimport {Col, Row } from 'components/Grid/index.tsx';\nimport Button from 'components/Button/index.tsx';\nimport { SOverlay, SPopupBody, SPopupContainer, SPopupHeader, SPopupTitle} from \"./Popup.styles.ts\";\nimport {IPopupProps} from \"./Popup.types.ts\";\n\n\nconst Popup: React.FC<IPopupProps> = ({ open, loading, submitText, onSubmit, cancelText, onClose, title, children }) => {\n    return (\n        <SOverlay $isOpen={open}>\n            <SPopupContainer>\n                <SPopupHeader>\n                    {title && <SPopupTitle>{title}</SPopupTitle>}\n                    <Icon size={20} className='pointer' icon={EIconNames.CLOSE} onClick={onClose} />\n                </SPopupHeader>\n                <SPopupBody>{children}</SPopupBody>\n                <Row gutter={[16, 12]} justify='end'>\n                    <Col>\n                        <Button outline width={40} onClick={onClose}>{cancelText}</Button>\n                    </Col>\n                   <Col>\n                     <Button  loading={loading} onClick={onSubmit}>{submitText}</Button>\n                   </Col>\n                </Row>\n            </SPopupContainer>\n        </SOverlay>\n    );\n};\n\nexport default Popup;\n","import styled from \"styled-components\";\nimport {TSize} from \"components/ThemeProvider/variables/mediaSizes.ts\";\nimport {colors} from \"components/ThemeProvider/variables/colors.ts\";\nimport {TAlertMessageType} from \"./AlertMessage.type.ts\";\n\nconst messageColorsByType: {\n    [key in TAlertMessageType]: {\n        bg: string;\n        color: string;\n    }\n} = {\n    success: {\n        bg: colors.greenWithOpacity,\n        color: colors.green,\n    },\n    danger: {\n        bg: colors.redWithOpacity,\n        color: colors.red,\n    },\n    info: {\n        bg: colors.blueWithOpacity,\n        color: colors.blue,\n    },\n    warning: {\n        bg: colors.orangeWithOpacity,\n        color: colors.orange,\n    },\n    default: {\n        bg: 'transparent',\n        color: 'transparent',\n    }\n\n}\nexport const SAlertMessage = styled.p<{ $size: TSize, $show?: boolean, $type: TAlertMessageType }>`\n    color: ${({$type}) => messageColorsByType[$type].color};\n    display: flex;\n    gap: 12px;\n    align-items: center;\n    margin: ${({theme}) => theme.spacings.lg} 0;\n    border-radius: ${({theme}) => theme.radiuses.sm};\n    background-color: ${({$type}) => messageColorsByType[$type].bg};\n    font-size: ${({theme, $size}) => theme.fontSizes.md || $size};\n    height: ${({$show}) => ($show ? '36px' : 0)};\n    padding: 0 ${({theme}) => theme.spacings.md};\n    transition: all ease-in-out 0.5s;\n    opacity: ${({$show}) => ($show ? 1 : 0)};\n\n    & {\n        svg {\n            margin-left: auto;\n\n            path {\n                fill: ${({$type}) => messageColorsByType[$type].color};\n            }\n        }\n    }\n`;","import {useEffect} from \"react\";\nimport {EIconNames, Icon} from \"components/Icon\";\nimport {SAlertMessage} from \"./AlertMessage.styles.ts\";\nimport {IAlertMessageType} from \"./AlertMessage.type.ts\";\n\nconst AlertMessage = ({size = 'sm', onClose, type='success', delay,  message}: IAlertMessageType) => {\n    useEffect(() => {\n        if (delay) {\n            setTimeout(() => onClose(), delay);\n\n        }}, [delay, onClose]);\n    return (\n       <SAlertMessage $show={!!message} $type={type} $size={size} >{message} <Icon size={18} className='pointer' onClick={onClose} icon={EIconNames.CLOSE} /></SAlertMessage>\n    );\n};\n\nexport default AlertMessage;","import * as React from 'react';\nimport {ChangeEvent, useState} from 'react';\nimport {useAddPostMutation} from \"redux/apiSlices/posts.slice.ts\";\nimport Popup from \"components/Popup\";\nimport {Col, Row} from \"components/Grid\";\nimport {Input, Textarea} from \"components/Input\";\nimport AlertMessage from \"components/AlertMessage\";\nimport {TRtkErrorType} from \"redux/types/api.types.ts\";\nimport {ICreatePostProps} from \"./CreatePost.types.ts\";\n\nconst CreatePost = ({children}: ICreatePostProps) => {\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [open, setOpen] = React.useState(false);\n    const [postTitle, setPostTitle] = React.useState(\"\");\n    const [postDescription, setPostDescription] = React.useState(\"\");\n    const [addPost, {isLoading}] = useAddPostMutation();\n\n\n    const onAlertClose = () => {\n        setError('');\n        setSuccess('');\n    }\n    const onFormReset = () => {\n        setPostDescription('');\n        setPostTitle('');\n        onAlertClose()\n    }\n    const onClose = () => {\n        onFormReset();\n        setOpen(false);\n    }\n    const onPostTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setPostTitle(e.target.value)\n    }\n\n    const onPostDescriptionChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setPostDescription(e.target.value)\n    }\n\n    const handleAddPost = async () => {\n        if (postTitle === \"\" || postDescription === \"\") {\n            setError('Both fields are mandatory!');\n        } else {\n            try {\n                await addPost({title: postTitle.trim(), body: postDescription.trim()}).unwrap();\n                onFormReset();\n                setSuccess('Post successfully added!');\n            } catch (error) {\n                const err = error as TRtkErrorType;\n                setError(err?.data?.message || 'Something went wrong!');\n            }\n        }\n    };\n\n    const clonedChildren = React.cloneElement(children, {\n        onClick: () => setOpen(true),\n    })\n\n    return (\n        <>\n            <Popup loading={isLoading} onSubmit={() => void handleAddPost} submitText='Create' cancelText='Cancel' open={open}\n                   onClose={onClose} title='Add a new post'>\n\n                <Row gutter={[16, 16]} justify='start'>\n                    <Col span={24}>\n                        <h4>Title</h4>\n                        <Input placeholder='Type title...' value={postTitle} name='postTitle'\n                               onChange={onPostTitleChange}/>\n                    </Col>\n                    <Col span={24}>\n                        <h4>Description</h4>\n                        <Textarea placeholder='Type description...' value={postDescription} name='postDescription'\n                                  onChange={onPostDescriptionChange}/>\n                    </Col>\n                    <Col span={24}>\n                        <AlertMessage type='success' onClose={onAlertClose}\n                                                   message={success}/>\n                        <AlertMessage type='danger' onClose={onAlertClose}\n                                      message={error}/>\n                    </Col>\n                </Row>\n            </Popup>\n            {clonedChildren}\n        </>\n    );\n};\n\nexport default CreatePost;"],"names":["SOverlay","styled","div","$isOpen","SPopupContainer","theme","main","background","radiuses","md","boxShadows","boxShadow2","spacings","lg","SPopupHeader","SPopupTitle","h2","fontSizes","textColor","SPopupBody","Popup","open","loading","submitText","onSubmit","cancelText","onClose","title","children","jsx","jsxs","Icon","size","className","icon","EIconNames","CLOSE","onClick","Row","gutter","justify","Col","Button","outline","width","messageColorsByType","success","bg","colors","greenWithOpacity","color","green","danger","redWithOpacity","red","info","blueWithOpacity","blue","warning","orangeWithOpacity","orange","default","SAlertMessage","p","$type","sm","$size","$show","AlertMessage","i","type","delay","message","useEffect","setTimeout","CreatePost","s","error","setError","useState","setSuccess","setOpen","React.useState","postTitle","setPostTitle","postDescription","setPostDescription","addPost","isLoading","useAddPostMutation","onAlertClose","clonedChildren","React.cloneElement","cloneElement","Fragment","span","Input","placeholder","value","name","onChange","e","target","Textarea"],"mappings":"0YAIO,MAAMA,EAAWC,EAAOC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,aAOlB,CAAGC,CAAAA,QAAAA,CAAAA,IAAeA,EAAU,QAAU,MAAA;AAAA;AAAA,EAItCC,EAAkBH,EAAOC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,wBAKd,CAAEG,CAAAA,MAAAA,CAAAA,IAAWA,EAAMC,KAAKC,UAAAA;AAAAA,qBAC3B,CAAEF,CAAAA,MAAAA,CAAAA,IAAWA,EAAMG,SAASC,EAAAA;AAAAA,kBAC/B,CAAEJ,CAAAA,MAAAA,CAAAA,IAAWA,EAAMK,WAAWC,UAAAA;AAAAA,eACjC,CAAEN,CAAAA,MAAAA,CAAAA,IAAWA,EAAMO,SAASC,EAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAM9BC,EAAeb,EAAOC;AAAAA;AAAAA;AAAAA;AAAAA,mBAIhB,CAAGG,CAAAA,MAAAA,CAAAA,IAAYA,EAAMO,SAASH,EAAAA;AAAAA,EAGpCM,EAAcd,EAAOe;AAAAA,eACnB,CAAGX,CAAAA,MAAAA,CAAAA,IAAYA,EAAMY,UAAUJ,EAAAA;AAAAA,WACnC,CAAGR,CAAAA,MAAAA,CAAAA,IAAYA,EAAMC,KAAKY,SAAAA;AAAAA;AAAAA,EAIxBC,EAAalB,EAAOC;AAAAA,eAClB,CAAGG,CAAAA,MAAAA,CAAAA,IAAYA,EAAMY,UAAUR,EAAAA;AAAAA,WACnC,CAAGJ,CAAAA,MAAAA,CAAAA,IAAYA,EAAMC,KAAKY,SAAAA;AAAAA;AAAAA,ECpC/BE,EAA+B,CAAGC,CAAAA,KAAAA,EAAMC,QAASC,EAAAA,WAAAA,EAAYC,SAAUC,EAAAA,WAAAA,EAAYC,QAASC,EAAAA,MAAAA,EAAOC,SAEhGC,CAAAA,IAAAA,EAAAA,IAAA7B,EAAA,CAASG,QAASkB,EACfO,gBAACxB,EACG,CAAAwB,SAAA,CAAAE,OAAChB,EACI,CAAAc,SAAA,CAASD,GAAAE,EAAAA,IAACd,GAAaa,SAAMD,CAAAA,CAAAA,EAC9BE,EAAAA,IAACE,EAAK,CAAAC,KAAM,GAAIC,UAAU,UAAUC,KAAMC,EAAWC,MAAOC,QAASX,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAEzEG,MAACV,GAAYS,SAAAA,CAAAA,CAAAA,EACbE,OAACQ,GAAIC,OAAQ,CAAC,GAAI,EAAKC,EAAAA,QAAQ,MAC3BZ,SAAA,CAACC,EAAAA,IAAAY,EAAA,CACGb,SAACC,EAAAA,IAAAa,EAAA,CAAOC,QAAAA,GAAQC,MAAO,GAAIP,QAASX,EAAUE,SAAAH,CAEnDI,CAAAA,CAAAA,CAAAA,EAAAA,EAAAA,IAACY,GACCb,SAACC,EAAAA,IAAAa,EAAA,CAAQpB,QAAAA,EAAkBe,QAASb,EAAWI,UCjB9DiB,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAKF,CACAC,QAAS,CACLC,GAAIC,EAAOC,iBACXC,MAAOF,EAAOG,KAAAA,EAElBC,OAAQ,CACJL,GAAIC,EAAOK,eACXH,MAAOF,EAAOM,GAElBC,EAAAA,KAAM,CACFR,GAAIC,EAAOQ,gBACXN,MAAOF,EAAOS,IAAAA,EAElBC,QAAS,CACLX,GAAIC,EAAOW,kBACXT,MAAOF,EAAOY,MAElBC,EAAAA,QAAS,CACLd,GAAI,cACJG,MAAO,aAIFY,CAAAA,EAAAA,EAAgB7D,EAAO8D;AAAAA,aACvB,CAAEC,CAAAA,MAAAA,CAAAA,IAAWnB,EAAoBmB,CAAOd,EAAAA,KAAAA;AAAAA;AAAAA;AAAAA;AAAAA,cAIvC,CAAE7C,CAAAA,MAAAA,CAAAA,IAAWA,EAAMO,SAASC,EAAAA;AAAAA,qBACrB,CAAER,CAAAA,MAAAA,CAAAA,IAAWA,EAAMG,SAASyD,EAAAA;AAAAA,wBACzB,CAAED,CAAAA,MAAAA,CAAAA,IAAWnB,EAAoBmB,CAAOjB,EAAAA,EAAAA;AAAAA,iBAC/C,CAAA,CAAE1C,MAAO6D,EAAAA,MAAAA,CAAAA,IAAW7D,EAAMY,UAAUR,IAAMyD,CAAAA;AAAAA,cAC7C,CAAEC,CAAAA,MAAAA,CAAAA,IAAYA,EAAQ,OAAS,CAAA;AAAA,iBAC5B,CAAE9D,CAAAA,MAAAA,CAAAA,IAAWA,EAAMO,SAASH,EAAAA;AAAAA;AAAAA,eAE9B,CAAE0D,CAAAA,MAAAA,CAAAA,IAAYA,EAAQ,EAAI,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAOjB,CAAEH,CAAAA,MAAAA,CAAAA,IAAWnB,EAAoBmB,CAAOd,EAAAA,KAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EC/C1DkB,EAAe,CAAA,CAAEpC,KAAOqC,EAAA,KAAM3C,QAAS4C,EAAAA,KAAAA,EAAK,UAAWC,MAAQC,EAAAA,QAAAA,CAAAA,KACjEC,EAAAA,UAAU,IACFF,CAAAA,GACWG,WAAA,IAAMhD,EAAAA,EAAW6C,CAEhC,CAAA,EAAI,CAACA,EAAO7C,CAEbI,CAAAA,EAAAA,OAACgC,GAAcK,MAAAA,CAAAA,CAASK,EAASR,MAAOM,EAAMJ,MAAOlC,EAAQJ,SAAA,CAAA4C,EAAQ,IAAC3C,EAAAA,IAACE,EAAK,CAAAC,KAAM,GAAIC,UAAU,UAAUI,QAASX,EAASQ,KAAMC,EAAWC,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GCF9IuC,EAAa,CAAA,CAAE/C,SACjBgD,CAAA,IAAA,CAAA,KAAA,CAAOC,EAAOC,CAAAA,EAAYC,WAAS,EAC5BjC,EAAAA,CAAAA,EAASkC,GAAcD,WAAS,EAChC1D,EAAAA,CAAAA,EAAM4D,CAAWC,EAAAA,WAAe,EAAA,EAAA,CAChCC,EAAWC,CAAAA,EAAgBF,WAAe,EAC1CG,EAAAA,CAAAA,EAAiBC,GAAsBJ,WAAe,EACtDK,EAAAA,CAAAA,EAAAA,CAASC,UAACA,CAAAA,CAAAA,EAAcC,EAGzBC,EAAAA,EAAe,IACjBZ,CAAAA,EAAS,EACTE,EAAAA,EAAW,EAAE,CAAA,EAkCXW,EAAiBC,EAAMC,aAAajE,EAAU,CAChDS,QAAS,IAAM4C,EAAQ,EAAA,CAAA,CAAA,EAG3B,OAEQnD,EAAAA,KAAAgE,WAAA,CAAAlE,SAAA,CAAAC,EAAAA,IAACT,EAAA,CAAME,QAASkE,EAAWhE,SAAU,IAAM,CAAA,EAAoBD,WAAW,SAASE,WAAW,SAASJ,OAChGK,QAlCC,IAAA,CAJZ4D,EAAmB,EAAA,EACnBF,EAAa,EAAA,EACAM,IAIbT,EAAQ,EAAA,CAAK,EAgCgBtD,MAAM,iBAE3BC,SAAAE,EAAAA,KAACQ,GAAIC,OAAQ,CAAC,GAAI,EAAKC,EAAAA,QAAQ,QAC3BZ,SAAA,CAACE,EAAAA,KAAAW,EAAA,CAAIsD,KAAM,GACPnE,SAAA,CAAAC,EAAAA,IAAC,MAAGD,SAAK,OAAA,CAAA,EACTC,EAAAA,IAACmE,EAAA,CAAMC,YAAY,gBAAgBC,MAAOf,EAAWgB,KAAK,YACnDC,SApCAC,GACVjB,CAAAA,EAAAiB,EAAEC,OAAOJ,KAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAqCfpE,EAAAA,KAACW,EAAI,CAAAsD,KAAM,GACPnE,SAAA,CAAAC,EAAAA,IAAC,MAAGD,SAAW,aACfC,CAAAA,EAAAA,EAAAA,IAAC0E,EAAA,CAASN,YAAY,sBAAsBC,MAAOb,EAAiBc,KAAK,kBAC/DC,SArCGC,GAAAA,CACVf,EAAAe,EAAEC,OAAOJ,KAAAA,CAAK,CAsCrBpE,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAAA,KAACW,EAAI,CAAAsD,KAAM,GACPnE,SAAA,CAAAC,EAAAA,IAACuC,EAAA,CAAaE,KAAK,UAAU5C,QAASgE,EACXlB,QAAS1B,CACpCjB,CAAAA,EAAAA,EAAAA,IAACuC,EAAA,CAAaE,KAAK,SAAS5C,QAASgE,EACvBlB,QAASK,CAIlCc,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CACL"}